[Course Description](https://cs.nyu.edu/courses/spring19/CSCI-UA.0480-003/):
Most of us have learned to program a single microprocessor with single core using a high-level programming language like C/C++, Java, ... This is called sequential programming. We feel very comfortable with this because, as human beings, we think in a sequential way and give the machine several statements to be executed in sequence. However, this has to change. A microprocessor with single core no longer exists in almost all computers we are using today (including your tablet, smartphone, and even smartwatch). Most of our devices are now multicore processors. A multicore processor contains several core (called CPUs or cores) on-chip. To make the best use of these multicore chips we need to program them in-parallel. Sequential programming, for all platforms from smartphones to supercomputers, is falling out of fashion and taking back-seat to parallel programming.
How to think in parallel? How to write code in parallel to make the best use of the underlying hardware? How is that new hardware different from the traditional one? What will the future be for the software and hardware? This is what this course is about.

[Lab 1](https://github.com/tdong185/home/blob/master/parallel%20labs/lab1.pdf): solve a group of linear equations using MPI
[Lab 2](https://github.com/tdong185/home/blob/master/parallel%20labs/lab2.pdf): solve a modified version of the traveling salesman problem in OpenMP.
[Lab 3](https://github.com/tdong185/home/blob/master/parallel%20labs/lab3.pdf): implement a reduction algorithm to find the maximum element of an array of integers.
